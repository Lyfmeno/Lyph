#!/bin/sh
. $HOME/.brewconfig.zsh
# COLORS
RED='\033[4;31m\033[5m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
ORANGE='\033[38;5;209m\e[1m'
PURPLE='\033[38;5;207m\e[1m'
PINK='\033[38;5;204m\e[1m'
PEACH='\033[38;5;223m\e[1m'
YELLOW='\033[38;5;226m\e[1m'
GREEN='\033[1;32m'
NC='\033[0m'
mysh=`echo $SHELL | cut -d/ -f3`

# ALIAS
# 	Basics
alias rt='printf "\033c"'
alias ll='ls -l --color=auto'
alias l='ls -la --color=auto'
alias dilf='diff -r'
alias grademe='bash -c "$(curl https://grademe.fr)"'
alias tmux='env TERM=screen-256color tmux'
#	 Compile
alias cpl='gcc -Wall -Wextra -Werror -g'
alias dcpl='rm -rf a.out'
alias vgrind='rt; valgrind --leak-check=full --show-leak-kinds=all'
# 	Git
alias gits='git fetch origin; git status'
alias gitl='git log'
# 	Makefile
alias mcl='rt; make fclean'
alias mre='rt; make re'

# FUNCTIONS
# 	Specific Dir
ledit()
{	
	echo -e "${PEACH}---- Opening Lym nvim file ----${NC}"
	cd ~/42/Ghub/Lym/nvim
	nvim .
}

vedit()
{	
	echo -e "${PEACH}---- Opening ~/.config/nivm file ----${NC}"
	cd ~/.config/nvim
	nvim .
}

zedit()
{
	echo -e "${PEACH}---- Opening .rc file ----${NC}"
	cd ~/."$mysh"rc
	nvim .
}

uedit()
{
	echo -e "${PEACH}---- Opening Usefull file ----${NC}"
	cd $HOME/42/Ghub/Usefull
	nvim .
}

kode()
{
	nvim .
}

rsource()
{
	source ~/."$mysh"rc
}

upsh()
{
	oldir=$(echo $PWD)
	cd $HOME/42/Ghub/Usefull/
	rt
	. $HOME/42/Ghub/Usefull/CreateAll.sh
	if [ $? -eq 0 ]; then
		echo -e "${PEACH}---- Updating current RC ${GREEN}SUCCEEDED ${PEACH}----${NC}"
	else
		echo -e "${PEACH}---- Updating current RC ${RED}FAILED ${PEACH}----${NC}"
	fi
	cd "${oldir}"
}

gupsh()
{
	oldir=$(echo $PWD)
	cd $HOME/42/Ghub/Usefull/
	rt
	. $HOME/42/Ghub/Usefull/CreateAll.sh
	if [ $? -eq 0 ]; then
		echo -e "${PEACH}---- Updating current RC ${GREEN}SUCCEEDED${PEACH} ----${NC}"
		cd $HOME/42/Ghub/Usefull
		fullgit $*
	else
		echo -e "${PEACH}---- Updating current RC ${RED}FAILED${PEACH} ----${NC}"
	fi
	cd "${oldir}"
}

uplym()
{
	oldir=$(echo $PWD)
	cd $HOME/42/Ghub/Lym/
	rt
	. $HOME/42/Ghub/Lym/Setup.sh
	if [ $? -eq 0 ]; then
		echo -e "${PEACH}---- Updating current RC ${GREEN}SUCCEEDED ${PEACH}----${NC}"
	else
		echo -e "${PEACH}---- Updating current RC ${RED}FAILED ${PEACH}----${NC}"
	fi
	cd "${oldir}"
}

guplym()
{
	oldir=$(echo $PWD)
	cd $HOME/42/Ghub/Lym/
	rt
	. $HOME/42/Ghub/Lym/Setup.sh
	if [ $? -eq 0 ]; then
		echo -e "${PEACH}---- Updating current RC ${GREEN}SUCCEEDED${PEACH} ----${NC}"
		cd $HOME/42/Ghub/Lym/
		fullgit $*
	else
		echo -e "${PEACH}---- Updating current RC ${RED}FAILED${PEACH} ----${NC}"
	fi
	cd "${oldir}"
}


# 	Template Generation
mkc()
{
	cat ~/.templates/.makexc > Makefile
	sed -i "s/a.out/$1/g" Makefile
	echo -e "${PEACH}-----------------------${NC}"
	echo -e "${PINK} Created a C Makefile${NC}"
	echo -e "${PEACH}-----------------------${NC}"
}

mksrc()
{
	printf '%s\n' "$(find . -type f -name "*.c" | grep -v "MLX" | sed -e "s/$/\\\/g" | sed -e "s/^/\t\t\t\t/g" )" |  sed -e '/ALLSRC/{ r /dev/stdin' -e 'd; }' $HOME/.templates/.makexc > Makefile.temp && printf '%s\n' "$(find . -type f -name "*.h" | grep -v "MLX" | sed -e "s/$/\\\/g" | sed -e "s/^/\t\t\t\t/g" )" | sed -e '/ALLHEADER/{ r /dev/stdin' -e 'd; }' Makefile.tmp > Makefile && rm Makefile.tmp
	echo -e "${PEACH}----------------------------------${NC}"
	echo -e "${PINK} Added Sources|Header to Makefile${NC}"
	echo -e "${PEACH}----------------------------------${NC}"
}

mksrcpp()
{
	printf '%s\n' "$(find . -type f -name "*.cpp" | grep -v "MLX" | sed -e "s/$/\\\/g" | sed -e "s/^/\t\t\t\t/g" )" | sed -e '/ALLSRC/{ r /dev/stdin' -e 'd; }' $HOME/.templates/.makexcpp > Makefile.temp && printf '%s\n' "$(find . -type f -name "*.hpp" | grep -v "MLX" | sed -e "s/$/\\\/g" | sed -e "s/^/\t\t\t\t/g" )" | sed -e '/ALLHEADER/{ r /dev/stdin' -e 'd; }' Makefile.tmp > Makefile && rm Makefile.tmp
	echo -e "${PEACH}-------------------------------------------${NC}"
	echo -e "${PINK} Added Sources|Header|Template to Makefile${NC}"
	echo -e "${PEACH}-------------------------------------------${NC}"
}

mkcpp()
{
	cat ~/.templates/.makexcpp > Makefile
	sed -i "s/a.out/$1/g" Makefile
	echo -e "${PEACH}------------------------${NC}"
	echo -e "${PINK} Created a CPP Makefile${NC}"
	echo -e "${PEACH}------------------------${NC}"
}

fullmkcpp()
{
	mkdir inc src
	mv *.cpp src
	mv *.hpp inc
	mv *.tpp inc
	echo -e "${PEACH}---------------------------${NC}"
	echo -e "${PINK} Created a CPP Environment${NC}"
	echo -e "${PEACH}---------------------------${NC}"
	cat ~/.templates/.makexcpp > Makefile
	sed -i "s/a.out/$1/g" Makefile
	echo -e "${PEACH}------------------------${NC}"
	echo -e "${PINK} Created a CPP Makefile${NC}"
	echo -e "${PEACH}------------------------${NC}"
}

fullmkc()
{
	mkdir inc src
	mv *.c src
	mv *.h inc
	echo -e "${PEACH}-------------------------${NC}"
	echo -e "${PINK} Created a C Environment${NC}"
	echo -e "${PEACH}-------------------------${NC}"
	cat ~/.templates/.makexc > Makefile
	sed -i "s/a.out/$1/g" Makefile
	echo -e "${PEACH}----------------------${NC}"
	echo -e "${PINK} Created a C Makefile${NC}"
	echo -e "${PEACH}----------------------${NC}"
}

genhpp()
{
	if [ $# -lt 1 ]; then
		return
	fi
	for i in {1..$#}; do
		fileName="${(P)i}.hpp"
		cat ~/.templates/.basicHPP > $fileName
		sed -i "s/CLASSNAME/${(P)i}/g" $fileName
		echo -e "${PEACH}----------------------------${NC}"
		echo -e "${PINK} Created a Basic CPP HEADER${NC}"
		echo -e "${PEACH}----------------------------${NC}"
	done
}

gencpp()
{
	if [ $# -lt 1 ]; then
		return
	fi
	for i in {1..$#}; do
		fileName="${(P)i}.cpp"
		cat ~/.templates/.basicCPP > $fileName
		sed -i "s/CLASSNAME/${(P)i}/g" $fileName
		echo -e "${PEACH}--------------------------${NC}"
		echo -e "${PINK} Created a Basic CPP FILE${NC}"
		echo -e "${PEACH}--------------------------${NC}"
	done
}

genbch()
{
	if [ $# -lt 1 ]; then
		return
	fi
	for i in {1..$#}; do
		name=${(P)i}
		gencpp $name
		genhpp $name
	done
}

# 	Git
gclyf()
{
	echo -e "${PEACH}------------------------------------------------------------${NC}"
	printf ${ORANGE}
	git clone "git@github.com:Lyfmeno/$1.git" --recursive
	printf ${NC}
	echo -e "${PEACH}------------------------------------------------------------${NC}"
}

gitc()
{
	echo -e "${PEACH}------------------------------------------------------------${NC}"
	printf ${ORANGE}
	git checkout $1
	printf ${NC}
	echo -e "${PEACH}------------------------------------------------------------${NC}"
}

gitbr()
{
	echo -e "${PEACH}------------------------------------------------------------${NC}"
	printf ${ORANGE}
	git branch $*
	printf ${NC}
	echo -e "${PEACH}------------------------------------------------------------${NC}"
}

llog()
{
	echo -e "${PEACH}------------------------------------------------------------${NC}"
	printf ${ORANGE}
	git log | head -5 | tail -4 | head -3
	printf ${PINK}
	git log | head -5 | tail -1
	printf ${NC}
	echo -e "${PEACH}------------------------------------------------------------${NC}"
}

fullgit()
{
	git add -A
	if [ $? -eq 0 ]; then
		echo -e "${PEACH}### ${ORANGE}Add -> ${GREEN}SUCCESS${NC}"
		git commit -m "$*"
		echo -e "${PEACH}### ${ORANGE}Commit -> ${GREEN}SUCCESS${NC}"
		git push
		if [ $? -eq 0 ]; then
			echo -e "${PEACH}### ${ORANGE}Push -> ${GREEN}SUCCESS${NC}"
			llog
		else
			echo -e "${PEACH}### ${ORANGE}Push -> ${RED}FAIL${NC}"
		fi
	else
		echo -e "${PEACH}### ${ORANGE}Add -> ${RED}FAIL${NC}"
	fi
}

# 	Random
bnorm()
{
	rt
	echo -e "${PINK}Be carefull this command does not show norm error for COMMENT !${NC}"
	echo -e "${ORANGE}----------------------------------------------------------------${NC}"
	printf ${PEACH}
	norminette $1 | grep -v COMMENT | grep -v OK!
	echo -e "${ORANGE}----------------------------------------------------------------${NC}"
}
